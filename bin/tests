#!/usr/bin/env bash
set -e


function usage() {
  cat <<USAGE >&2
Usage: tests [-h] [/path/to/test]
  -h  Show help
USAGE
  exit ${1:--1}
}


# check if stdout is a terminal...
function setup_colors() {
  if test -t 1; then

    # see if it supports colors...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test $ncolors -ge 8; then
      bold="$(tput bold)"
      underline="$(tput smul)"
      standout="$(tput smso)"
      normal="$(tput sgr0)"
      black="$(tput setaf 0)"
      red="$(tput setaf 1)"
      green="$(tput setaf 2)"
      yellow="$(tput setaf 3)"
      blue="$(tput setaf 4)"
      magenta="$(tput setaf 5)"
      cyan="$(tput setaf 6)"
      white="$(tput setaf 7)"
    fi
  fi
}


readonly compose=docker/tests.yml


# Build images ($@)
function build_images() {
  declare -a services=("${@}")
  docker-compose -f $compose build \
                 --force-rm \
                 "${services[@]}"
}


# Tun tests within a specific test file ($1) if given; otherwise all
# tests are run
function run_tests() {
  export TESTPATH=$1
  export PYVERS="py27 py37"

  local pids=""
  declare -A pmap
  
  for PYVER in $PYVERS ; do
    export PYVER
    export COMPOSE_PROJECT_NAME=$PYVER
    ( build_images mime_streamer_test >> tmp/$PYVER 2>&1 && \
        docker-compose -f $compose up --abort-on-container-exit >> tmp/$PYVER 2>&1 ) &
    local pid="$!"
    pmap["$pid"]=$PYVER
    pids+=" $pid"
  done

  setup_colors
  
  for pid in $pids ; do
    local PYVER=${pmap[$pid]}
    
    if wait $pid ; then
      echo "Success $PYVER"
    else
      cat tmp/$PYVER
      echo "${red}Fail ${PYVER}${normal}"
    fi
  done
}


while getopts "h" opt; do
  case $opt in
    h)
      usage 0
      ;;
    \?)
      usage
      ;;
    :)
      echo "Option -$OPTARG requires an argument" >&2
      exit -1
      ;;
  esac
done
shift $(($OPTIND - 1))


run_tests "${1:-tests/}"
